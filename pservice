#!/usr/bin/env python3

import argparse
import http.server
import json
import os
import re
import sqlite3
import ssl
import sys
import tempfile
import unittest
import uuid

from base64 import b64decode
from binascii import hexlify
from http import HTTPStatus

KEY_LENGTH_IN_BYTES = int(256 / 8)

STORAGE_V1_RX = re.compile(r'^/storage/v1/([\da-fA-F]{%d})$' % int(KEY_LENGTH_IN_BYTES * 2))
STORAGE_V1_RX_KEY_IDX = 1

class HttpHeader:
	Host = 'Host'
	ContentLength = 'Content-Length'
	ContentType = 'Content-Type'

class MimeType:
	class Application:
		OctetStream = 'application/octet-stream'

def fatal(message: str, exitCode: int = 1):
	print(message, file = sys.stderr)
	exit(exitCode)

def load_test_vectors():
	with open('test_vectors.json', 'r') as f:
		j = json.load(f)

	result = dict()

	for project in j.keys():
		print("Importing test vectors for '%s'..." % project)
		casenum = 0
		for case in j[project]:
			casenum += 1

			print("  Case %d:" % casenum)
			if case['type'] == 'storage':

				entries = case['entries']
				for entry in entries:
					bkey = b64decode(entry['key']['ciphertext'])
					key = str(hexlify(bkey), encoding = 'ascii')
					value = b64decode(entry['value']['ciphertext'])
					pkey = entry['key']['plaintext']

					m = STORAGE_V1_RX.match('/storage/v1/' + key)
					if not m:
						fatal("    Invalid key: '%s'" % key)

					result[key] = value
					print("    Added '%s' to 'storage/v1' ('%s')." % (key, pkey))

	return result

def open_db(file_name = None):

	if not file_name:
		file_name = 'data.db'

	db = sqlite3.connect(file_name)
	cursor = db.cursor()
	cursor.execute('''
		CREATE TABLE IF NOT EXISTS Storage (
			Key VARCHAR(%d) PRIMARY KEY,
			Value BLOB
		) WITHOUT ROWID;
	''' % int(KEY_LENGTH_IN_BYTES * 2))
	db.commit()
	return db

def insert_or_replace_key_value(key, value, db_file_name = None):
	# Check if someone tries to overwrite a test vector
	if Settings.EnableTestVectors and Settings.TestVectors:
		if key in Settings.TestVectors:
			Settings.TestVectors[key] = value
			return

	# Else actually store the value in the database
	db = open_db(db_file_name)
	cursor = db.cursor()
	cursor.execute('''
		INSERT OR REPLACE INTO Storage (Key, Value) VALUES (?, ?);
	''', (key, value))
	db.commit()
	db.close()

def get_value_for_key(key, db_file_name = None):
	# Check if a test vector is requested if test vectors are enabled
	if Settings.EnableTestVectors and Settings.TestVectors:
		if key in Settings.TestVectors:
			return Settings.TestVectors[key]

	# If it isn't a test vector or test vectors are disabled, read from database
	db = open_db(db_file_name)
	cursor = db.cursor()
	cursor.execute('SELECT Value FROM Storage WHERE Key = ?;', (key,))
	row = cursor.fetchone()
	db.close()
	if row:
		return row[0]

	return None

def remove_value_for_key(key, db_file_name = None):
	# Check if a test vector is requested
	if Settings.EnableTestVectors and Settings.TestVectors:
		if key in Settings.TestVectors:
			del Settings.TestVectors['key']
			return

	# Else remove value from database
	db = open_db(db_file_name)
	cursor = db.cursor()
	cursor.execute('DELETE FROM Storage WHERE Key = ?;', (key,))
	db.commit()
	db.close()

class Settings:
	AllowSuperfluousHeaders = False
	EnableTestVectors = False

	# Context
	TestVectors = None

class PServiceRequestHandler(http.server.BaseHTTPRequestHandler):

	def sanitize_request_headers(self, allowed_headers):
		if not Settings.AllowSuperfluousHeaders:
			superfluous_headers = set(self.headers) - allowed_headers
			if superfluous_headers:
				self.send_error(
					HTTPStatus.BAD_REQUEST,
					message = HTTPStatus.BAD_REQUEST.phrase,
					explain = 'Superfluous headers are not allowed, they could be used for fingerprinting attacks: "%s"' %
						'", "'.join(sorted(list(superfluous_headers))),
				)
				return False
		return True

	def do_GET(self):
		m = STORAGE_V1_RX.match(self.path)
		if m:
			if not self.sanitize_request_headers({HttpHeader.Host}):
				return
			key = str(m.group(STORAGE_V1_RX_KEY_IDX))
			value = get_value_for_key(key)
			if value:
				self.send_response(HTTPStatus.OK)
				self.send_header(HttpHeader.ContentType, MimeType.Application.OctetStream)
				self.end_headers()
				self.wfile.write(value)
			else:
				self.send_error(
					HTTPStatus.NOT_FOUND,
					message = HTTPStatus.NOT_FOUND.phrase,
					explain = 'The requested entry does not exist.'
				)
		else:
			self.send_error(
				HTTPStatus.NOT_FOUND,
				message = HTTPStatus.NOT_FOUND.phrase,
				explain = 'The URL is not a valid service endpoint.'
			)

	def do_POST(self):
		m = STORAGE_V1_RX.match(self.path)
		if m:
			if not self.sanitize_request_headers({
				HttpHeader.Host,
				HttpHeader.ContentType,
				HttpHeader.ContentLength,
			}):
				return
			key = m.group(STORAGE_V1_RX_KEY_IDX)
			try:
				contentLength = int(self.headers[HttpHeader.ContentLength])
			except ValueError:
				self.send_error(
					HTTPStatus.BAD_REQUEST,
					message = HTTPStatus.BAD_REQUEST,
					explain = '"%s" is not a valid value for the HTTP "%s" header.' % (
						self.headers[HttpHeader.ContentLength],
						HttpHeader.ContentLength
					)
				)
				return
			value = self.rfile.read(contentLength)
			insert_or_replace_key_value(key, value)
			self.send_response(HTTPStatus.OK)
			self.end_headers()
		else:
			self.send_error(
				HTTPStatus.NOT_FOUND,
				message = HTTPStatus.NOT_FOUND.phrase,
				explain = 'The URL is not a valid service endpoint.'
			)

	def do_DELETE(self):
		m = STORAGE_V1_RX.match(self.path)
		if m:
			if not self.sanitize_request_headers({HttpHeader.Host}):
				return
			key = m.group(STORAGE_V1_RX_KEY_IDX)
			remove_value_for_key(key)
			self.send_response(HTTPStatus.OK)
			self.end_headers()
		else:
			self.send_error(
				HTTPStatus.NOT_FOUND,
				message = HTTPStatus.NOT_FOUND.phrase,
				explain = 'The URL is not a valid service endpoint.'
			)

def main():
	binpath = os.path.split(sys.argv[0])[0]
	keyfile = os.path.join(binpath, 'key.pem')
	crtfile = os.path.join(binpath, 'crt.pem')

	parser = argparse.ArgumentParser()
	parser.add_argument(
		'-t', '--test',
		help = 'Run unit tests. Additional arguments are available. If this option is set, it has to be the first.',
		action = 'store_true',
		default = False,
	)
	parser.add_argument(
		'-p', '--port',
		help = 'The port the server should listen on.',
		type = int,
		default = 8080,
	)
	parser.add_argument(
		'-a', '--address',
		help = 'The address the server should listen on.',
		type = str,
		default = '',
	)
	parser.add_argument(
		'-k', '--keyfile',
		help = 'The file containing the private key for SSL connections in PEM format.',
		type = str,
		default = keyfile,
	)
	parser.add_argument(
		'-c', '--certfile',
		help = 'The file containing the certificate for SSL connections in PEM format.',
		type = str,
		default = crtfile,
	)
	parser.add_argument(
		'--allow-superfluous-headers',
		help = 'When set additional HTTP headers will be ignored. A request with additional headers will be rejected else.',
		action = 'store_true',
		default = Settings.AllowSuperfluousHeaders,
	)
	parser.add_argument(
		'--enable-test-vectors',
		help = 'Activates test vectors.',
		action = 'store_true',
		default = Settings.EnableTestVectors,
	)
	args = parser.parse_args()

	if args.test:
		parser.print_help()
		exit(1)

	keyfile = args.keyfile
	crtfile = args.certfile

	serverAddress = (args.address, args.port)

	Settings.AllowSuperfluousHeaders = args.allow_superfluous_headers
	Settings.EnableTestVectors = args.enable_test_vectors

	if Settings.EnableTestVectors:
		Settings.TestVectors = load_test_vectors()

	if not os.path.isfile(keyfile):
		fatal('Missing file: %s' % keyfile)
	if not os.path.isfile(crtfile):
		fatal('Missing file: %s' % crtfile)

	try:
		httpd = http.server.HTTPServer(serverAddress, PServiceRequestHandler)
	except PermissionError:
		fatal('Permission denied. Maybe you need root access to open port %d?' % serverAddress[1])

	context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
	context.options |= ssl.OP_NO_SSLv2
	context.options |= ssl.OP_NO_SSLv3
	context.options |= ssl.OP_NO_TLSv1
	context.options |= ssl.OP_NO_TLSv1_1
	context.load_cert_chain(
		certfile = crtfile,
		keyfile  = keyfile,
	)

	httpd.socket = context.wrap_socket(
		httpd.socket,
		server_side = True,
	)
	print('Listening on port %d... press ^C to quit.' % serverAddress[1])
	try:
		httpd.serve_forever()
	except KeyboardInterrupt:
		httpd.shutdown()
	print('Done.')

class TestRegularExpressions(unittest.TestCase):

	def test_storage_v1_rx(self):
		# Positive test
		m = STORAGE_V1_RX.match('/storage/v1/ed5d0909f2c385b92166ae74aa6945cdd4d01c3b746ff7c90b93c5725078fc76')
		self.assertIsNotNone(m)
		self.assertEqual(
			m.group(STORAGE_V1_RX_KEY_IDX),
			'ed5d0909f2c385b92166ae74aa6945cdd4d01c3b746ff7c90b93c5725078fc76'
		)

		# Negative tests
		self.assertIsNone(STORAGE_V1_RX.match('/storage/v1/ed5d0909f2c385b92166ae74aa6945cdd4d01c3b746ff7c90b9'))
		self.assertIsNone(STORAGE_V1_RX.match('/storage/v1/ed5d0909f2c385b92166ae74aa6945cdd4d01c3b746ff7c90b93c'))
		self.assertIsNone(STORAGE_V1_RX.match('/storage/v1/ed5d0909f2c385b92166ae74aa6945cdd4d01c3b746ff7c90b9x'))
		self.assertIsNone(STORAGE_V1_RX.match('/storage/v2/ed5d0909f2c385b92166ae74aa6945cdd4d01c3b746ff7c90b93'))
		self.assertIsNone(STORAGE_V1_RX.match('/storaage/v1/ed5d0909f2c385b92166ae74aa6945cdd4d01c3b746ff7c90b93'))

	def test_storage_v1_db(self):
		test_db_file = os.path.join(tempfile.gettempdir(), str(uuid.uuid4()) + ".db")

		key = 'ed5d0909f2c385b92166ae74aa6945cdd4d01c3b746ff7c90b93c5725078fc76'

		# Try retrieving non-existant value
		self.assertIsNone(get_value_for_key(key, test_db_file))

		# Test insertion
		insert_or_replace_key_value(key, b'foo', test_db_file)
		self.assertEqual(get_value_for_key(key, test_db_file), b'foo')

		# Test overwriting
		insert_or_replace_key_value(key, b'bar', test_db_file)
		self.assertEqual(get_value_for_key(key, test_db_file), b'bar')

		# Test deletion
		remove_value_for_key(key, test_db_file)
		self.assertIsNone(get_value_for_key(key, test_db_file))

		os.remove(test_db_file)

if __name__ == '__main__':
	if len(sys.argv) > 1 and sys.argv[1] in ['-t', '--test']:
		del sys.argv[1]
		unittest.main()
	else:
		main()
